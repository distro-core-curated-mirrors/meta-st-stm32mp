From 8f418d690678fcb5ee68d4513b113a4a4da8a2dd Mon Sep 17 00:00:00 2001
From: Christophe Priouzeau <christophe.priouzeau@foss.st.com>
Date: Tue, 3 Dec 2024 10:00:01 +0100
Subject: [PATCH 2/2] v6.6-stm32mp-r1.1

---
 drivers/media/i2c/gc2145.c                    | 75 +++++++++++++++++--
 .../st/stm32/stm32-dcmipp/dcmipp-bytecap.c    |  2 +-
 .../st/stm32/stm32-dcmipp/dcmipp-byteproc.c   | 18 ++++-
 .../st/stm32/stm32-dcmipp/dcmipp-common.h     | 39 ----------
 .../st/stm32/stm32-dcmipp/dcmipp-input.c      | 59 +++++++++++----
 .../st/stm32/stm32-dcmipp/dcmipp-isp.c        | 43 +++++++----
 .../st/stm32/stm32-dcmipp/dcmipp-pixelcap.c   | 58 +++++++-------
 .../st/stm32/stm32-dcmipp/dcmipp-pixelproc.c  | 12 +--
 .../st/stm32/stm32-dcmipp/dcmipp-statcap.c    |  2 +-
 .../st/stm32/stm32-dcmipp/dcmipp-tpg.c        |  4 +-
 drivers/media/v4l2-core/v4l2-subdev.c         | 37 +++------
 include/media/v4l2-subdev.h                   |  4 +-
 12 files changed, 195 insertions(+), 158 deletions(-)

diff --git a/drivers/media/i2c/gc2145.c b/drivers/media/i2c/gc2145.c
index 12d3780b5..898cf5b96 100644
--- a/drivers/media/i2c/gc2145.c
+++ b/drivers/media/i2c/gc2145.c
@@ -542,45 +542,82 @@ static const struct gc2145_mode supported_modes[] = {
 /**
  * struct gc2145_format - GC2145 pixel format description
  * @code: media bus (MBUS) associated code
+ * @colorspace: V4L2 colorspace
  * @datatype: MIPI CSI2 data type
  * @output_fmt: GC2145 output format
  * @switch_bit: GC2145 first/second switch
+ * @row_col_switch: GC2145 switch row and/or column
  */
 struct gc2145_format {
 	unsigned int code;
+	unsigned int colorspace;
 	unsigned char datatype;
 	unsigned char output_fmt;
 	bool switch_bit;
+	unsigned char row_col_switch;
 };
 
 /* All supported formats */
 static const struct gc2145_format supported_formats[] = {
 	{
 		.code		= MEDIA_BUS_FMT_UYVY8_1X16,
+		.colorspace	= V4L2_COLORSPACE_SRGB,
 		.datatype	= MIPI_CSI2_DT_YUV422_8B,
 		.output_fmt	= 0x00,
 	},
 	{
 		.code		= MEDIA_BUS_FMT_VYUY8_1X16,
+		.colorspace	= V4L2_COLORSPACE_SRGB,
 		.datatype	= MIPI_CSI2_DT_YUV422_8B,
 		.output_fmt	= 0x01,
 	},
 	{
 		.code		= MEDIA_BUS_FMT_YUYV8_1X16,
+		.colorspace	= V4L2_COLORSPACE_SRGB,
 		.datatype	= MIPI_CSI2_DT_YUV422_8B,
 		.output_fmt	= 0x02,
 	},
 	{
 		.code		= MEDIA_BUS_FMT_YVYU8_1X16,
+		.colorspace	= V4L2_COLORSPACE_SRGB,
 		.datatype	= MIPI_CSI2_DT_YUV422_8B,
 		.output_fmt	= 0x03,
 	},
 	{
 		.code		= MEDIA_BUS_FMT_RGB565_1X16,
+		.colorspace	= V4L2_COLORSPACE_SRGB,
 		.datatype	= MIPI_CSI2_DT_RGB565,
 		.output_fmt	= 0x06,
 		.switch_bit	= true,
 	},
+	{
+		.code           = MEDIA_BUS_FMT_SGRBG8_1X8,
+		.colorspace     = V4L2_COLORSPACE_RAW,
+		.datatype       = MIPI_CSI2_DT_RAW8,
+		.output_fmt     = 0x17,
+		.row_col_switch = GC2145_SYNC_MODE_COL_SWITCH,
+	},
+	{
+		.code           = MEDIA_BUS_FMT_SRGGB8_1X8,
+		.colorspace     = V4L2_COLORSPACE_RAW,
+		.datatype       = MIPI_CSI2_DT_RAW8,
+		.output_fmt     = 0x17,
+		.row_col_switch = GC2145_SYNC_MODE_COL_SWITCH | GC2145_SYNC_MODE_ROW_SWITCH,
+	},
+	{
+		.code           = MEDIA_BUS_FMT_SBGGR8_1X8,
+		.colorspace     = V4L2_COLORSPACE_RAW,
+		.datatype       = MIPI_CSI2_DT_RAW8,
+		.output_fmt     = 0x17,
+		.row_col_switch = 0,
+	},
+	{
+		.code           = MEDIA_BUS_FMT_SGBRG8_1X8,
+		.colorspace     = V4L2_COLORSPACE_RAW,
+		.datatype       = MIPI_CSI2_DT_RAW8,
+		.output_fmt     = 0x17,
+		.row_col_switch = GC2145_SYNC_MODE_ROW_SWITCH,
+	},
 };
 
 struct gc2145_ctrls {
@@ -641,7 +678,8 @@ gc2145_get_format_code(struct gc2145 *gc2145, u32 code)
 
 static void gc2145_update_pad_format(struct gc2145 *gc2145,
 				     const struct gc2145_mode *mode,
-				     struct v4l2_mbus_framefmt *fmt, u32 code)
+				     struct v4l2_mbus_framefmt *fmt, u32 code,
+				     u32 colorspace)
 {
 	fmt->code = code;
 	fmt->width = mode->width;
@@ -663,7 +701,8 @@ static int gc2145_init_cfg(struct v4l2_subdev *sd,
 	/* Initialize pad format */
 	format = v4l2_subdev_state_get_format(state, 0);
 	gc2145_update_pad_format(gc2145, &supported_modes[0], format,
-				 MEDIA_BUS_FMT_RGB565_1X16);
+				 MEDIA_BUS_FMT_RGB565_1X16,
+				 V4L2_COLORSPACE_SRGB);
 
 	/* Initialize crop rectangle. */
 	crop = v4l2_subdev_state_get_crop(state, 0);
@@ -754,7 +793,13 @@ static int gc2145_set_pad_format(struct v4l2_subdev *sd,
 				      width, height,
 				      fmt->format.width, fmt->format.height);
 
-	gc2145_update_pad_format(gc2145, mode, &fmt->format, gc2145_fmt->code);
+	/* In RAW mode, VGA is not possible so use 720p instead */
+	if (gc2145_fmt->colorspace == V4L2_COLORSPACE_RAW &&
+	    mode == &supported_modes[GC2145_MODE_640X480])
+		mode = &supported_modes[GC2145_MODE_1280X720];
+
+	gc2145_update_pad_format(gc2145, mode, &fmt->format, gc2145_fmt->code,
+				 gc2145_fmt->colorspace);
 	framefmt = v4l2_subdev_state_get_format(sd_state, fmt->pad);
 	if (fmt->which == V4L2_SUBDEV_FORMAT_ACTIVE) {
 		gc2145->mode = mode;
@@ -811,7 +856,11 @@ static int gc2145_config_mipi_mode(struct gc2145 *gc2145,
 	 * For RAW8, LWC = image width
 	 * For RAW10, LWC = image width * 1.25
 	 */
-	lwc = gc2145->mode->width * 2;
+	if (gc2145_format->colorspace != V4L2_COLORSPACE_RAW)
+		lwc = gc2145->mode->width * 2;
+	else
+		lwc = gc2145->mode->width;
+
 	cci_write(gc2145->regmap, GC2145_REG_LWC_HIGH, lwc >> 8, &ret);
 	cci_write(gc2145->regmap, GC2145_REG_LWC_LOW, lwc & 0xff, &ret);
 
@@ -821,10 +870,14 @@ static int gc2145_config_mipi_mode(struct gc2145 *gc2145,
 	 * 1280x720 / 1600x1200 (aka no scaler) non RAW: 0x0001
 	 * 1600x1200 RAW: 0x0190
 	 */
-	if (gc2145->mode->width == 1280 || gc2145->mode->width == 1600)
-		fifo_full_lvl = 0x0001;
-	else
+	if (gc2145_format->colorspace != V4L2_COLORSPACE_RAW) {
+		if (gc2145->mode->width == 1280 || gc2145->mode->width == 1600)
+			fifo_full_lvl = 0x0001;
+		else
+			fifo_full_lvl = 0x0190;
+	} else {
 		fifo_full_lvl = 0x0190;
+	}
 
 	cci_write(gc2145->regmap, GC2145_REG_FIFO_FULL_LVL_HIGH,
 		  fifo_full_lvl >> 8, &ret);
@@ -835,7 +888,9 @@ static int gc2145_config_mipi_mode(struct gc2145 *gc2145,
 	 * Set the FIFO gate mode / MIPI wdiv set:
 	 * 0xf1 in case of RAW mode and 0xf0 otherwise
 	 */
-	cci_write(gc2145->regmap, GC2145_REG_FIFO_GATE_MODE, 0xf0, &ret);
+	cci_write(gc2145->regmap, GC2145_REG_FIFO_GATE_MODE,
+		  gc2145_format->colorspace == V4L2_COLORSPACE_RAW ?
+		  0xf1 : 0xf0, &ret);
 
 	/* Set the MIPI data type */
 	cci_write(gc2145->regmap, GC2145_REG_MIPI_DT,
@@ -883,6 +938,10 @@ static int gc2145_start_streaming(struct gc2145 *gc2145,
 			GC2145_BYPASS_MODE_SWITCH,
 			gc2145_format->switch_bit ? GC2145_BYPASS_MODE_SWITCH
 						  : 0, &ret);
+	cci_update_bits(gc2145->regmap, GC2145_REG_SYNC_MODE,
+			GC2145_SYNC_MODE_COL_SWITCH |
+			GC2145_SYNC_MODE_ROW_SWITCH,
+			gc2145_format->row_col_switch, &ret);
 	if (ret) {
 		dev_err(&client->dev, "%s failed to write regs\n", __func__);
 		goto err_rpm_put;
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
index a878ea811..4279c7b4a 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-bytecap.c
@@ -375,7 +375,7 @@ static int dcmipp_pipeline_s_stream(struct dcmipp_bytecap_device *vcap,
 	if (ret < 0)
 		return ret;
 
-	ret = dcmipp_s_stream_helper(vcap->s_subdev, state);
+	ret = v4l2_subdev_call(vcap->s_subdev, video, s_stream, state);
 	if (ret < 0) {
 		dev_err(vcap->dev, "failed to %s streaming (%d)\n",
 			state ? "start" : "stop", ret);
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-byteproc.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-byteproc.c
index 73829b3ee..7212924ca 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-byteproc.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-byteproc.c
@@ -25,6 +25,7 @@
 #define DCMIPP_P0SCSZR_HSIZE_SHIFT	0
 #define DCMIPP_P0SCSZR_VSIZE_SHIFT	16
 #define DCMIPP_P0PPCR	0x5c0
+#define DCMIPP_P0PPCR_SWAPYUV		BIT(0)
 #define DCMIPP_P0PPCR_BSM_1_2		0x1
 #define DCMIPP_P0PPCR_BSM_1_4		0x2
 #define DCMIPP_P0PPCR_BSM_2_4		0x3
@@ -470,9 +471,10 @@ static int dcmipp_byteproc_configure_scale_crop
 	if (!vpix)
 		return -EINVAL;
 
-	/* clear decimation/crop */
+	/* clear decimation/crop/swap yuv */
 	reg_clear(byteproc, DCMIPP_P0PPCR, DCMIPP_P0PPCR_BSM_MASK);
 	reg_clear(byteproc, DCMIPP_P0PPCR, DCMIPP_P0PPCR_LSM);
+	reg_clear(byteproc, DCMIPP_P0PPCR, DCMIPP_P0PPCR_SWAPYUV);
 	reg_write(byteproc, DCMIPP_P0SCSTR, 0);
 	reg_write(byteproc, DCMIPP_P0SCSZR, 0);
 
@@ -493,6 +495,16 @@ static int dcmipp_byteproc_configure_scale_crop
 	if (vprediv == 2)
 		val |= DCMIPP_P0PPCR_LSM | DCMIPP_P0PPCR_OELS;
 
+	/*
+	 * Perform a SWAP YUV if input is parallel since in this mode
+	 * the DCMIPP will swap YUV by default
+	 */
+	if (sink_fmt->code == MEDIA_BUS_FMT_YUYV8_2X8 ||
+	    sink_fmt->code == MEDIA_BUS_FMT_YVYU8_2X8 ||
+	    sink_fmt->code == MEDIA_BUS_FMT_UYVY8_2X8 ||
+	    sink_fmt->code == MEDIA_BUS_FMT_VYUY8_2X8)
+		val |= DCMIPP_P0PPCR_SWAPYUV;
+
 	/* decimate using bytes and lines skipping */
 	if (val) {
 		reg_set(byteproc, DCMIPP_P0PPCR, val);
@@ -604,7 +616,7 @@ static int dcmipp_byteproc_s_stream(struct v4l2_subdev *sd, int enable)
 		if (ret)
 			return ret;
 
-		ret = dcmipp_s_stream_helper(s_subdev, enable);
+		ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 		if (ret < 0) {
 			dev_err(byteproc->dev,
 				"failed to start source subdev streaming (%d)\n",
@@ -612,7 +624,7 @@ static int dcmipp_byteproc_s_stream(struct v4l2_subdev *sd, int enable)
 			return ret;
 		}
 	} else {
-		ret = dcmipp_s_stream_helper(s_subdev, enable);
+		ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 		if (ret < 0) {
 			dev_err(byteproc->dev,
 				"failed to stop source subdev streaming (%d)\n",
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-common.h b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-common.h
index 00feca94d..a779c4a17 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-common.h
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-common.h
@@ -248,45 +248,6 @@ static inline void __reg_clear(struct device *dev, void __iomem *base, u32 reg,
 	__reg_write(dev, base, reg, readl_relaxed(base + reg) & ~mask);
 }
 
-/*
- * Helper function to avoid calling s_stream if v4l2_subdev streaming state
- * is already correct
- * This helper is here temporarily while waiting to move to proper
- * v4l2_subdev_stream_ functions
- * The move isn't yet done since this would require a much larger rework such
- * as implementing pad->enable_streams ops for subdev having multiple source
- * pads (such as dcmipp_input).  Moreover the stream API is still considered
- * as experimental as of linux v6.6
- *
- * This function reuse the enabled_streams counter within v4l2-subdev to count
- * the number of users of a subdevice.  Below we need to use a local variable
- * and not directly enabled_streams otherwise we would have v4l2_subdev_call
- * complain that the value are already matching when enabling and disable the
- * subdev.
- */
-static inline int dcmipp_s_stream_helper(struct v4l2_subdev *sd, int state)
-{
-	u64 count = sd->enabled_streams;
-	int ret;
-
-	/*
-	 * If enabling, don't do anything if enabled_streams was already > 0
-	 * if disabling, don't do anything if decreamented enabled_streams is still > 0
-	 */
-	if ((state && count++) || (!state && --count)) {
-		sd->enabled_streams = count;
-		return 0;
-	}
-
-	ret = v4l2_subdev_call(sd, video, s_stream, state);
-	if (ret)
-		return ret;
-
-	sd->enabled_streams = count;
-
-	return 0;
-}
-
 /* DCMIPP subdev init / release entry points */
 struct dcmipp_ent_device *dcmipp_tpg_ent_init(const char *entity_name,
 					      struct dcmipp_device *dcmipp);
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c
index 3a1157f30..124f4b179 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-input.c
@@ -83,18 +83,18 @@ static const struct dcmipp_inp_pix_map dcmipp_inp_pix_map_list[] = {
 	PIXMAP_SINK_SRC_PRCR_SWAP(RGB565_2X8_BE, RGB565_2X8_LE, RGB565, 0, MIPI_CSI2_DT_RGB565),
 	PIXMAP_SINK_SRC_PRCR_SWAP(RGB565_1X16, RGB565_1X16, RGB565, 0, MIPI_CSI2_DT_RGB565),
 	/* RGB888 */
-	PIXMAP_SINK_SRC_PRCR_SWAP(RGB888_3X8, RGB888_3X8, RGB888, 1, MIPI_CSI2_DT_RGB888),
+	PIXMAP_SINK_SRC_PRCR_SWAP(RGB888_3X8, RGB888_3X8, RGB888, 0, MIPI_CSI2_DT_RGB888),
 	PIXMAP_SINK_SRC_PRCR_SWAP(RGB888_1X24, RGB888_1X24, RGB888, 0, MIPI_CSI2_DT_RGB888),
 	/* YUV422 */
-	PIXMAP_SINK_SRC_PRCR_SWAP(YUYV8_2X8, YUYV8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(YUYV8_2X8, YUYV8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
 	PIXMAP_SINK_SRC_PRCR_SWAP(YUYV8_1X16, YUYV8_1X16, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
-	PIXMAP_SINK_SRC_PRCR_SWAP(YUYV8_2X8, UYVY8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
-	PIXMAP_SINK_SRC_PRCR_SWAP(UYVY8_2X8, UYVY8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(YUYV8_2X8, UYVY8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(UYVY8_2X8, UYVY8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
 	PIXMAP_SINK_SRC_PRCR_SWAP(UYVY8_1X16, UYVY8_1X16, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
-	PIXMAP_SINK_SRC_PRCR_SWAP(UYVY8_2X8, YUYV8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
-	PIXMAP_SINK_SRC_PRCR_SWAP(YVYU8_2X8, YVYU8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(UYVY8_2X8, YUYV8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(YVYU8_2X8, YVYU8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
 	PIXMAP_SINK_SRC_PRCR_SWAP(YVYU8_1X16, YVYU8_1X16, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
-	PIXMAP_SINK_SRC_PRCR_SWAP(VYUY8_2X8, VYUY8_2X8, YUV422, 1, MIPI_CSI2_DT_YUV422_8B),
+	PIXMAP_SINK_SRC_PRCR_SWAP(VYUY8_2X8, VYUY8_2X8, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
 	PIXMAP_SINK_SRC_PRCR_SWAP(VYUY8_1X16, VYUY8_1X16, YUV422, 0, MIPI_CSI2_DT_YUV422_8B),
 	/* GREY */
 	PIXMAP_SINK_SRC_PRCR_SWAP(Y8_1X8, Y8_1X8, G8, 0, MIPI_CSI2_DT_RAW8),
@@ -181,7 +181,10 @@ struct dcmipp_inp_device {
 	struct v4l2_subdev sd;
 	struct device *dev;
 	void __iomem *regs;
-	bool streaming;
+
+	/* Protect concurrent access to s_stream */
+	struct mutex lock;
+	u32 usecnt;
 };
 
 static const struct v4l2_mbus_framefmt fmt_default = {
@@ -283,8 +286,12 @@ static int dcmipp_inp_set_fmt(struct v4l2_subdev *sd,
 	struct v4l2_mbus_framefmt *mf;
 	int i;
 
-	if (inp->streaming)
+	mutex_lock(&inp->lock);
+
+	if (inp->usecnt) {
+		mutex_unlock(&inp->lock);
 		return -EBUSY;
+	}
 
 	mf = v4l2_subdev_state_get_format(sd_state, fmt->pad);
 
@@ -313,6 +320,8 @@ static int dcmipp_inp_set_fmt(struct v4l2_subdev *sd,
 		}
 	}
 
+	mutex_unlock(&inp->lock);
+
 	return 0;
 }
 
@@ -485,40 +494,53 @@ static int dcmipp_inp_s_stream(struct v4l2_subdev *sd, int enable)
 		return -EINVAL;
 	s_subdev = media_entity_to_v4l2_subdev(pad->entity);
 
+	mutex_lock(&inp->lock);
+
 	if (enable) {
+		/* Nothing to do if already enabled by someone */
+		if (inp->usecnt)
+			goto out;
+
 		if (inp->ved.bus_type == V4L2_MBUS_PARALLEL ||
 		    inp->ved.bus_type == V4L2_MBUS_BT656)
 			ret = dcmipp_inp_configure_parallel(inp, enable);
 		else if (inp->ved.bus_type == V4L2_MBUS_CSI2_DPHY)
 			ret = dcmipp_inp_configure_csi(inp);
 		if (ret)
-			return ret;
+			goto error_s_stream;
 
-		ret = dcmipp_s_stream_helper(s_subdev, enable);
+		ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 		if (ret < 0) {
 			dev_err(inp->dev,
 				"failed to start source subdev streaming (%d)\n",
 				ret);
-			return ret;
+			goto error_s_stream;
 		}
 	} else {
-		ret = dcmipp_s_stream_helper(s_subdev, enable);
+		if (inp->usecnt > 1)
+			goto out;
+
+		ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 		if (ret < 0) {
 			dev_err(inp->dev,
 				"failed to stop source subdev streaming (%d)\n",
 				ret);
-			return ret;
+			goto error_s_stream;
 		}
 
 		if (inp->ved.bus_type == V4L2_MBUS_PARALLEL ||
 		    inp->ved.bus_type == V4L2_MBUS_BT656) {
 			ret = dcmipp_inp_configure_parallel(inp, enable);
 			if (ret)
-				return ret;
+				goto error_s_stream;
 		}
 	}
 
-	inp->streaming = enable;
+out:
+	inp->usecnt += enable ? 1 : -1;
+
+error_s_stream:
+	mutex_unlock(&inp->lock);
 
 	return ret;
 }
@@ -550,6 +572,7 @@ void dcmipp_inp_ent_release(struct dcmipp_ent_device *ved)
 			container_of(ved, struct dcmipp_inp_device, ved);
 
 	dcmipp_ent_sd_unregister(ved, &inp->sd);
+	mutex_destroy(&inp->lock);
 }
 
 #define DCMIPP_INP_SINK_PAD_NB_MP13	1
@@ -578,6 +601,9 @@ struct dcmipp_ent_device *dcmipp_inp_ent_init(const char *entity_name,
 
 	inp->regs = dcmipp->regs;
 
+	/* Initialize the lock */
+	mutex_init(&inp->lock);
+
 	/* Initialize ved and sd */
 	ret = dcmipp_ent_sd_register(&inp->ved, &inp->sd, &dcmipp->v4l2_dev,
 				     entity_name, MEDIA_ENT_F_VID_IF_BRIDGE,
@@ -585,6 +611,7 @@ struct dcmipp_ent_device *dcmipp_inp_ent_init(const char *entity_name,
 				     &dcmipp_inp_int_ops, &dcmipp_inp_ops,
 				     NULL, NULL);
 	if (ret) {
+		mutex_destroy(&inp->lock);
 		kfree(inp);
 		return ERR_PTR(ret);
 	}
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
index 68b357754..60aacda22 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-isp.c
@@ -83,13 +83,7 @@ static const unsigned int dcmipp_isp_sink_pix_map_list[] = {
 	MEDIA_BUS_FMT_RGB888_1X24,
 	/* YUV422 */
 	MEDIA_BUS_FMT_YUYV8_2X8,
-	MEDIA_BUS_FMT_YUYV8_1X16,
-	MEDIA_BUS_FMT_UYVY8_2X8,
 	MEDIA_BUS_FMT_UYVY8_1X16,
-	MEDIA_BUS_FMT_YVYU8_2X8,
-	MEDIA_BUS_FMT_YVYU8_1X16,
-	MEDIA_BUS_FMT_VYUY8_2X8,
-	MEDIA_BUS_FMT_VYUY8_1X16,
 	/* GREY */
 	MEDIA_BUS_FMT_Y8_1X8,
 	MEDIA_BUS_FMT_Y10_1X10,
@@ -156,7 +150,9 @@ struct dcmipp_isp_device {
 	struct v4l2_subdev sd;
 	struct device *dev;
 
-	refcount_t usecnt;
+	/* Protect concurrent access to s_stream */
+	struct mutex lock;
+	u32 usecnt;
 
 	void __iomem *regs;
 };
@@ -278,8 +274,12 @@ static int dcmipp_isp_set_fmt(struct v4l2_subdev *sd,
 	struct dcmipp_isp_device *isp = v4l2_get_subdevdata(sd);
 	struct v4l2_mbus_framefmt *pad_fmt, *opp_pad_fmt;
 
-	if (refcount_read(&isp->usecnt))
+	mutex_lock(&isp->lock);
+
+	if (isp->usecnt) {
+		mutex_unlock(&isp->lock);
 		return -EBUSY;
+	}
 
 	pad_fmt = v4l2_subdev_state_get_format(state, fmt->pad);
 
@@ -343,6 +343,8 @@ static int dcmipp_isp_set_fmt(struct v4l2_subdev *sd,
 
 	*pad_fmt = fmt->format;
 
+	mutex_unlock(&isp->lock);
+
 	return 0;
 }
 
@@ -566,10 +568,12 @@ static int dcmipp_isp_s_stream(struct v4l2_subdev *sd, int enable)
 		return -EINVAL;
 	s_subdev = media_entity_to_v4l2_subdev(pad->entity);
 
+	mutex_lock(&isp->lock);
+
 	if (enable) {
 		/* Nothing to do if already enabled by someone */
-		if (refcount_inc_not_zero(&isp->usecnt))
-			return 0;
+		if (isp->usecnt)
+			goto out;
 
 		state = v4l2_subdev_lock_and_get_active_state(&isp->sd);
 		sink_fmt = v4l2_subdev_state_get_format(state, 0);
@@ -595,18 +599,21 @@ static int dcmipp_isp_s_stream(struct v4l2_subdev *sd, int enable)
 		/* Configure Demosaicing */
 		dcmipp_isp_config_demosaicing(isp, sink_fmt);
 	} else {
-		if (refcount_dec_not_one(&isp->usecnt))
-			return 0;
+		if (isp->usecnt > 1)
+			goto out;
 	}
 
-	ret = dcmipp_s_stream_helper(s_subdev, enable);
+	ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 	if (ret < 0) {
 		dev_err(isp->dev,
 			"failed to start source subdev streaming (%d)\n", ret);
-		return ret;
+		goto error_s_stream;
 	}
 
-	refcount_set(&isp->usecnt, enable ? 1 : 0);
+out:
+	isp->usecnt += enable ? 1 : -1;
+error_s_stream:
+	mutex_unlock(&isp->lock);
 
 	return 0;
 }
@@ -626,6 +633,7 @@ void dcmipp_isp_ent_release(struct dcmipp_ent_device *ved)
 			container_of(ved, struct dcmipp_isp_device, ved);
 
 	dcmipp_ent_sd_unregister(ved, &isp->sd);
+	mutex_destroy(&isp->lock);
 	kfree(isp);
 }
 
@@ -662,7 +670,9 @@ struct dcmipp_ent_device *dcmipp_isp_ent_init(const char *entity_name,
 
 	isp->regs = dcmipp->regs;
 	isp->dev = dcmipp->dev;
-	refcount_set(&isp->usecnt, 0);
+
+	/* Initialize the lock */
+	mutex_init(&isp->lock);
 
 	/* Initialize ved and sd */
 	ret = dcmipp_ent_sd_register(&isp->ved, &isp->sd,
@@ -672,6 +682,7 @@ struct dcmipp_ent_device *dcmipp_isp_ent_init(const char *entity_name,
 				     NULL, &dcmipp_isp_ops,
 				     NULL, NULL);
 	if (ret) {
+		mutex_destroy(&isp->lock);
 		kfree(isp);
 		return ERR_PTR(ret);
 	}
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
index b9b6b867a..dcf63987b 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelcap.c
@@ -118,9 +118,9 @@ static const struct dcmipp_pixelcap_pix_map dcmipp_pixelcap_pix_map_list[] = {
 	PIXMAP_MBUS_PFMT(YUV8_1X24, GREY, 1, DCMIPP_PxPPCR_FORMAT_Y8, 0),
 	PIXMAP_MBUS_PFMT(RGB888_1X24, RGB24, 1, DCMIPP_PxPPCR_FORMAT_RGB888, 1),
 	PIXMAP_MBUS_PFMT(RGB888_1X24, BGR24, 1, DCMIPP_PxPPCR_FORMAT_RGB888, 0),
-	PIXMAP_MBUS_PFMT(RGB888_1X24, ARGB32, 1, DCMIPP_PxPPCR_FORMAT_ARGB8888, 1),
+	PIXMAP_MBUS_PFMT(RGB888_1X24, ARGB32, 1, DCMIPP_PxPPCR_FORMAT_RGBA8888, 1),
 	PIXMAP_MBUS_PFMT(RGB888_1X24, ABGR32, 1, DCMIPP_PxPPCR_FORMAT_ARGB8888, 0),
-	PIXMAP_MBUS_PFMT(RGB888_1X24, RGBA32, 1, DCMIPP_PxPPCR_FORMAT_RGBA8888, 1),
+	PIXMAP_MBUS_PFMT(RGB888_1X24, RGBA32, 1, DCMIPP_PxPPCR_FORMAT_ARGB8888, 1),
 	PIXMAP_MBUS_PFMT(RGB888_1X24, BGRA32, 1, DCMIPP_PxPPCR_FORMAT_RGBA8888, 0),
 
 	/* Semiplanar & planar formats (plane_nb > 1) are only supported on main pipe */
@@ -495,7 +495,7 @@ static int dcmipp_pipeline_s_stream(struct dcmipp_pixelcap_device *vcap,
 	if (ret < 0)
 		return ret;
 
-	ret = dcmipp_s_stream_helper(vcap->s_subdev, state);
+	ret = v4l2_subdev_call(vcap->s_subdev, video, s_stream, state);
 	if (ret < 0) {
 		dev_err(vcap->dev, "failed to %s streaming (%d)\n",
 			state ? "start" : "stop", ret);
@@ -505,8 +505,8 @@ static int dcmipp_pipeline_s_stream(struct dcmipp_pixelcap_device *vcap,
 	return 0;
 }
 
-static int dcmipp_start_capture(struct dcmipp_pixelcap_device *vcap,
-				struct dcmipp_buf *buf)
+static void dcmipp_start_capture(struct dcmipp_pixelcap_device *vcap,
+				 struct dcmipp_buf *buf)
 {
 	/*
 	 * Set frame addresses
@@ -532,8 +532,6 @@ static int dcmipp_start_capture(struct dcmipp_pixelcap_device *vcap,
 
 	/* Capture request */
 	reg_set(vcap, DCMIPP_PxFCTCR(vcap->pipe_id), DCMIPP_PxFCTCR_CPTREQ);
-
-	return 0;
 }
 
 static int dcmipp_pixelcap_start_streaming(struct vb2_queue *vq,
@@ -568,47 +566,43 @@ static int dcmipp_pixelcap_start_streaming(struct vb2_queue *vq,
 	if (ret)
 		goto err_media_pipeline_stop;
 
-	/* Configure the Pixel Packer */
-	vpix = dcmipp_pixelcap_pix_map_by_pixelformat(vcap->format.pixelformat);
-	if (!vpix)
-		goto err_media_pipeline_stop;
+	spin_lock_irq(&vcap->irqlock);
 
+	/*
+	 * Configure the Pixel Packer
+	 * vpix is guaranteed to be valid since pixelformat is validated
+	 * in dcmipp_pixelcap_s_fmt_vid_cap function before
+	 */
+	vpix = dcmipp_pixelcap_pix_map_by_pixelformat(vcap->format.pixelformat);
 	ppcr = vpix->ppcr_fmt;
 	if (vpix->swap_uv)
 		ppcr |= DCMIPP_PxPPCR_SWAPRB;
 
 	reg_write(vcap, DCMIPP_PxPPCR(vcap->pipe_id), ppcr);
 
-	/* Enable interruptions */
-	vcap->cmier |= DCMIPP_CMIER_PxALL(vcap->pipe_id);
-	spin_lock(&vcap->vdev.v4l2_dev->lock);
-	reg_set(vcap, DCMIPP_CMIER, vcap->cmier);
-	spin_unlock(&vcap->vdev.v4l2_dev->lock);
-
 	/* Enable pipe at the end of programming */
 	reg_set(vcap, DCMIPP_PxFSCR(vcap->pipe_id), DCMIPP_PxFSCR_PIPEN);
 
 	/*
-	 * Start capture if at least one buffer has been queued,
-	 * otherwise start is deferred at next buffer queueing
+	 * vb2 framework guarantee that we have at least 'min_buffers_needed'
+	 * buffers in the list at this moment
 	 */
-	buf = list_first_entry_or_null(&vcap->buffers, typeof(*buf), list);
-	if (!buf) {
-		dev_dbg(vcap->dev, "Start streaming is deferred to next buffer queueing\n");
-		vcap->next = NULL;
-		vcap->state = DCMIPP_WAIT_FOR_BUFFER;
-		return 0;
-	}
-	vcap->next = buf;
+	vcap->next = list_first_entry(&vcap->buffers, typeof(*buf), list);
 	dev_dbg(vcap->dev, "Start with next [%d] %p phy=%pad\n",
-		buf->vb.vb2_buf.index, buf, &buf->paddr);
+		vcap->next->vb.vb2_buf.index, vcap->next, &vcap->next->paddr);
+
+	/* Start capture */
+	dcmipp_start_capture(vcap, vcap->next);
+
+	/* Enable interruptions */
+	vcap->cmier |= DCMIPP_CMIER_PxALL(vcap->pipe_id);
+	spin_lock(&vcap->vdev.v4l2_dev->lock);
+	reg_set(vcap, DCMIPP_CMIER, vcap->cmier);
+	spin_unlock(&vcap->vdev.v4l2_dev->lock);
 
 	vcap->state = DCMIPP_RUNNING;
 
-	/* Start capture */
-	ret = dcmipp_start_capture(vcap, buf);
-	if (ret)
-		goto err_media_pipeline_stop;
+	spin_unlock_irq(&vcap->irqlock);
 
 	return 0;
 
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelproc.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelproc.c
index 70a05a91a..9bd891645 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelproc.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-pixelproc.c
@@ -121,15 +121,7 @@ static const struct dcmipp_pixelproc_pix_map dcmipp_pixelproc_sink_pix_map_list[
 	PIXMAP_MBUS(RGB888_3X8, DCMIPP_AUX_PIPE),
 	/* YUV formats */
 	PIXMAP_MBUS(YUYV8_2X8, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(YUYV8_1X16, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(YUYV8_2X8, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(UYVY8_2X8, DCMIPP_AUX_PIPE),
 	PIXMAP_MBUS(UYVY8_1X16, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(UYVY8_2X8, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(YVYU8_2X8, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(YVYU8_1X16, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(VYUY8_2X8, DCMIPP_AUX_PIPE),
-	PIXMAP_MBUS(VYUY8_1X16, DCMIPP_AUX_PIPE),
 	PIXMAP_MBUS(Y8_1X8, DCMIPP_AUX_PIPE),
 	PIXMAP_MBUS(Y10_1X10, DCMIPP_AUX_PIPE),
 	PIXMAP_MBUS(Y12_1X12, DCMIPP_AUX_PIPE),
@@ -1064,7 +1056,7 @@ static int dcmipp_pixelproc_s_stream(struct v4l2_subdev *sd, int enable)
 	s_subdev = media_entity_to_v4l2_subdev(pad->entity);
 
 	if (!enable) {
-		ret = dcmipp_s_stream_helper(s_subdev, enable);
+		ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 		if (ret < 0)
 			dev_err(pixelproc->dev,
 				"failed to stop source subdev streaming (%d)\n",
@@ -1110,7 +1102,7 @@ static int dcmipp_pixelproc_s_stream(struct v4l2_subdev *sd, int enable)
 		return ret;
 	}
 
-	ret = dcmipp_s_stream_helper(s_subdev, enable);
+	ret = v4l2_subdev_call(s_subdev, video, s_stream, enable);
 	if (ret < 0) {
 		dev_err(pixelproc->dev,
 			"failed to start source subdev streaming (%d)\n", ret);
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c
index 50e52758a..4483193ed 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-statcap.c
@@ -202,7 +202,7 @@ static int dcmipp_pipeline_s_stream(struct dcmipp_statcap_device *vcap,
 		vcap->s_subdev = media_entity_to_v4l2_subdev(pad->entity);
 	}
 
-	ret = dcmipp_s_stream_helper(vcap->s_subdev, state);
+	ret = v4l2_subdev_call(vcap->s_subdev, video, s_stream, state);
 	if (ret < 0) {
 		dev_err(vcap->dev, "failed to %s streaming (%d)\n",
 			state ? "start" : "stop", ret);
diff --git a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-tpg.c b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-tpg.c
index 6374a5cdc..4526f0398 100644
--- a/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-tpg.c
+++ b/drivers/media/platform/st/stm32/stm32-dcmipp/dcmipp-tpg.c
@@ -65,7 +65,7 @@ struct dcmipp_tpg_pix_map {
 		.tpg_format = tpg_fmt,			\
 	}
 static const struct dcmipp_tpg_pix_map dcmipp_tpg_pix_map_list[] = {
-	PIXMAP_MBUS_TPG(YUYV8_1X16, DCMIPP_CMTPGCR2_FMT_YUV422),
+	PIXMAP_MBUS_TPG(UYVY8_1X16, DCMIPP_CMTPGCR2_FMT_YUV422),
 	PIXMAP_MBUS_TPG(RGB565_1X16, DCMIPP_CMTPGCR2_FMT_RGB565),
 	PIXMAP_MBUS_TPG(RGB888_1X24, DCMIPP_CMTPGCR2_FMT_RGB888),
 	PIXMAP_MBUS_TPG(SBGGR8_1X8, DCMIPP_CMTPGCR2_FMT_RAW8 |
@@ -278,7 +278,7 @@ static int dcmipp_tpg_s_stream(struct v4l2_subdev *sd, int enable)
 		goto unlock;
 
 	/* Set YT if format is YUV422 */
-	if (fmt->code == MEDIA_BUS_FMT_YUYV8_1X16) {
+	if (fmt->code == MEDIA_BUS_FMT_UYVY8_1X16) {
 		if (fmt->quantization != V4L2_QUANTIZATION_FULL_RANGE)
 			reg_set(tpg, DCMIPP_CMTPGCR2,
 				DCMIPP_CMTPGCR2_YT_REDUCED);
diff --git a/drivers/media/v4l2-core/v4l2-subdev.c b/drivers/media/v4l2-core/v4l2-subdev.c
index 97dbd70bf..88c61c23a 100644
--- a/drivers/media/v4l2-core/v4l2-subdev.c
+++ b/drivers/media/v4l2-core/v4l2-subdev.c
@@ -359,37 +359,20 @@ static int call_s_stream(struct v4l2_subdev *sd, int enable)
 {
 	int ret;
 
-	/*
-	 * The .s_stream() operation must never be called to start or stop an
-	 * already started or stopped subdev. Catch offenders but don't return
-	 * an error yet to avoid regressions.
-	 *
-	 * As .s_stream() is mutually exclusive with the .enable_streams() and
-	 * .disable_streams() operation, we can use the enabled_streams field
-	 * to store the subdev streaming state.
-	 */
-	if (WARN_ON(!!sd->enabled_streams == !!enable))
-		return 0;
-
+#if IS_REACHABLE(CONFIG_LEDS_CLASS)
+	if (!IS_ERR_OR_NULL(sd->privacy_led)) {
+		if (enable)
+			led_set_brightness(sd->privacy_led,
+					   sd->privacy_led->max_brightness);
+		else
+			led_set_brightness(sd->privacy_led, 0);
+	}
+#endif
 	ret = sd->ops->video->s_stream(sd, enable);
 
 	if (!enable && ret < 0) {
 		dev_warn(sd->dev, "disabling streaming failed (%d)\n", ret);
-		ret = 0;
-	}
-
-	if (!ret) {
-		sd->enabled_streams = enable ? BIT(0) : 0;
-
-#if IS_REACHABLE(CONFIG_LEDS_CLASS)
-		if (!IS_ERR_OR_NULL(sd->privacy_led)) {
-			if (enable)
-				led_set_brightness(sd->privacy_led,
-						   sd->privacy_led->max_brightness);
-			else
-				led_set_brightness(sd->privacy_led, 0);
-		}
-#endif
+		return 0;
 	}
 
 	return ret;
diff --git a/include/media/v4l2-subdev.h b/include/media/v4l2-subdev.h
index 7a291e18f..053d6e1a9 100644
--- a/include/media/v4l2-subdev.h
+++ b/include/media/v4l2-subdev.h
@@ -446,9 +446,7 @@ enum v4l2_subdev_pre_streamon_flags {
  * @s_stream: start (enabled == 1) or stop (enabled == 0) streaming on the
  *	sub-device. Failure on stop will remove any resources acquired in
  *	streaming start, while the error code is still returned by the driver.
- *	The caller shall track the subdev state, and shall not start or stop an
- *	already started or stopped subdev. Also see call_s_stream wrapper in
- *	v4l2-subdev.c.
+ *	Also see call_s_stream wrapper in v4l2-subdev.c.
  *
  * @g_pixelaspect: callback to return the pixelaspect ratio.
  *
-- 
2.34.1

